samples = tmp.out
colnames(aripo_sr) = samples$sample
colnames(aripo_dp) = samples$sample
as.factor(samples$Family) -> samples$Family
as.matrix(aripo_sr) -> aripo_sr
as.matrix(aripo_dp) -> aripo_dp
write.csv(aripo_sr, file = "output/aripo_sr.mat")
write.csv(aripo_dp, file = "output/aripo_dp.mat")
write.csv(quare_sr, file = "output/quare_sr.mat")
write.csv(quare_dp, file = "output/quare_dp.mat")
# change quare colnames to match samples.quare
strsplit(colnames(quare_sr), split = "_") -> tmp
as.data.frame(tmp) -> tmp
t(tmp) -> tmp
colnames(quare_sr) = tmp[1:58,1]
colnames(quare_dp) = tmp[1:58,1]
colnames(samples.quare)[1] = "sample"
# set samples.quare equal to quare matrices
tmp.out = data.frame()
for (id in colnames(quare_sr)) {
samples.quare %>% filter(sample == id) -> tmp
tmp.out = rbind(tmp.out, tmp)
}
samples.quare = tmp.out
as.matrix(quare_dp) -> quare_dp
as.matrix(quare_sr) -> quare_sr
View(quare_dp)
rm(list = ls())
library(dplyr)
library(stringr)
read.csv(file = "data/Aripo_dp_mat.csv") -> aripo_dp
read.csv(file = "data/aripo.mat") -> aripo_sr
read.csv(file = "data/Quare_dp_mat.csv") -> quare_dp
read.csv(file = "data/quare.mat") -> quare_sr
read.csv(file = "data/SraRunTable.csv") -> sra_table
# make sample table from sra run table
sra_table %>% filter(Strain == "Aripo") -> sra_aripo
#sra_table %>% filter(Strain == "Quare") -> sra_quare
strsplit(sra_aripo$Library.Name, c("_")) -> tmp
#strsplit(sra_quare$Library.Name, "_") -> tmp.quare
as.data.frame(tmp) -> tmp
#as.data.frame(tmp.quare) -> tmp.quare
t(tmp) -> tmp
#t(tmp.quare) -> tmp.quare
strsplit(tmp[1:40,2], split = "-") -> tmp2
#strsplit(tmp.quare[1:60,2], split = "-") -> tmp.quare2
as.data.frame(tmp2) -> tmp2
#as.data.frame(tmp.quare2) -> tmp.quare2
t(tmp2) -> tmp2
#t(tmp.quare2) -> tmp.quare2
cbind(tmp[1:40,1], tmp2[1:40,1:2]) -> tmp3
#cbind(tmp.quare[1:60,1], tmp.quare2[1:60,1:2]) -> tmp.quare3
as.data.frame(tmp3) -> samples
#as.data.frame(tmp.quare3) -> samples.quare
colnames(samples) = c("sample","Pop","Rearing")
#colnames(samples.quare) = c("sample","Pop","Rearing")
rownames(samples) = 1:40
#rownames(samples.quare) = 1:60
Family= c( 208,211,208,212,207,209,207,207,210,210,210,210,214,204,204,205,214,211,214,219,206,218,217,219,217,219,201,215,201,215,216,203,216,203,216,215,201,204,202,205)
samples[order(samples$sample),] -> samples
samples$Family = Family
read.csv(file = "data/BehO2_Male_decode.csv") -> samples.quare
samples.quare %>% dplyr::select(-X, -Sequenced) -> samples.quare
colnames(aripo_sr)[1] = "Id"
colnames(quare_sr)[1] = "Id"
aripo_dp$Id = paste(aripo_dp$Chrom, aripo_dp$Location, "aripo", sep = "_")
quare_dp$Id = paste(quare_dp$Chrom, quare_dp$Location, "quare", sep = "_")
# match rows between SR and DP matrices
tmp.out = data.frame()
for (id in aripo_sr$Id) {
aripo_dp %>% filter(Id == id) -> tmp
tmp.out = rbind(tmp.out, tmp)
}
aripo_dp = tmp.out
tmp.out = data.frame()
for (id in quare_sr$Id) {
quare_dp %>% filter(Id == id) -> tmp
tmp.out = rbind(tmp.out, tmp)
}
quare_dp = tmp.out
# convert sra to sample id
tmp4 = ""
for (col in colnames(aripo_dp)[3:38]) {
strsplit(col, split = ".tmp") -> tmp
tmp2 = tmp[[1]]
sra_table %>% filter(Run == tmp2) -> tmp3
tmp4 = append(tmp4, tmp3$Library.Name)
}
aripo_dp_ids = tmp4[2:37]
paste("X",aripo_dp_ids, sep = "") -> aripo_dp_ids
strsplit(aripo_dp_ids, split = "-") -> tmp
as.data.frame(tmp) -> tmp
t(tmp) -> tmp
as.data.frame(tmp) -> tmp
paste(tmp$V1, tmp$V2, sep = ".") -> aripo_dp_ids
# select same set of cols as dp matrix
aripo_sr %>% dplyr::select(aripo_dp_ids) -> aripo_sr
# convert sra to sample id - quare
tmp4 = ""
for (col in colnames(quare_dp)[3:62]) {
strsplit(col, split = ".tmp") -> tmp
tmp2 = tmp[[1]]
sra_table %>% filter(Run == tmp2) -> tmp3
tmp4 = append(tmp4, tmp3$Library.Name)
}
quare_dp_ids = tmp4[2:60]
strsplit(quare_dp_ids, split = "-") -> tmp
as.data.frame(tmp) -> tmp
t(tmp) -> tmp
as.data.frame(tmp) -> tmp
paste(tmp$V1, tmp$V2, sep = ".") -> quare_dp_ids
colnames(quare_sr)[2:59] -> quare_sr_ids
colnames(quare_dp)[3:61] = quare_dp_ids
# select same set of cols as dp matrix
aripo_sr %>% dplyr::select(aripo_dp_ids) -> aripo_sr
quare_dp %>% dplyr::select(quare_sr_ids) -> quare_dp
write.csv(quare_sr, file = "output/quare_sr.mat")
write.csv(quare_dp, file = "output/quare_dp.mat")
# create row names from id col
rownames(quare_dp) = quare_dp$Id
quare_sr %>% dplyr::select(-Id) -> quare_sr
# clean up dp matrix
rownames(aripo_dp) = aripo_dp$Id
rownames(aripo_sr) = aripo_dp$Id
aripo_dp %>% dplyr::select(-Chrom, -Location, -Id) -> aripo_dp
# change from srr colnames to actual Ids
colnames(aripo_dp) = aripo_dp_ids
strsplit(colnames(aripo_sr), split = "X") -> tmp
as.data.frame(tmp) -> tmp
t(tmp) -> tmp
strsplit(tmp[1:36,2], split = "_") -> tmp
as.data.frame(tmp) -> tmp
t(tmp) -> tmp
as.data.frame(tmp) -> tmp
tmp.out = data.frame()
for (id in tmp$V1) {
samples %>% filter(sample == id) -> tmp2
tmp.out = rbind(tmp.out, tmp2)
}
samples = tmp.out
colnames(aripo_sr) = samples$sample
colnames(aripo_dp) = samples$sample
as.factor(samples$Family) -> samples$Family
as.matrix(aripo_sr) -> aripo_sr
as.matrix(aripo_dp) -> aripo_dp
write.csv(aripo_sr, file = "output/aripo_sr.mat")
write.csv(aripo_dp, file = "output/aripo_dp.mat")
# change quare colnames to match samples.quare
strsplit(colnames(quare_sr), split = "_") -> tmp
as.data.frame(tmp) -> tmp
t(tmp) -> tmp
colnames(quare_sr) = tmp[1:58,1]
colnames(quare_dp) = tmp[1:58,1]
colnames(samples.quare)[1] = "sample"
# set samples.quare equal to quare matrices
tmp.out = data.frame()
for (id in colnames(quare_sr)) {
samples.quare %>% filter(sample == id) -> tmp
tmp.out = rbind(tmp.out, tmp)
}
samples.quare = tmp.out
as.matrix(quare_dp) -> quare_dp
as.matrix(quare_sr) -> quare_sr
ggpredict()
library(ggeffects)
install.packages("ggeffects")
library(ggeffects)
ggpredict(fit_glmer)
fit_glmer<-glmer.nb(quare_sr[i,] ~ Pop*Rearing + (1|Family) + offset(log(quare_dp[i,])),
data = samples.quare)
i = 1
fit_glmer<-glmer.nb(quare_sr[i,] ~ Pop*Rearing + (1|Family) + offset(log(quare_dp[i,])),
data = samples.quare)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm.R", echo=TRUE)
ggpredict(fit_glmer)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
View(aripo_de)
View(aripo_de)
View(de_res)
View(de_res_quare)
read.csv(file = "output/DE_re_quare2.csv") -> de_res_quare
View(de_res_quare)
hist(de_res$pval_pop_wald)
hist(de_res$pval_int_wald)
View(de_res)
hist(tmp.out$N_fish)
hist(tmp.out$SR_sum, breaks = 30)
hist(tmp.out$DP_sum, breaks = 30)
fdrtool(de_res$pval_pop_wald, statistic = "pvalue", plot = F) -> tmp
tmp$qval -> de_res$qval_pop
fdrtool(de_res$pval_rear_wald, statistic = "pvalue", plot = F) -> tmp
tmp$qval -> de_res$qval_rear
View(de_res)
hist(de_res$Resid_sqSum)
hist(de_res$Resid_sqSum, breaks = 50)
View(aripo_sr)
View(de_res)
View(aripo_de)
library(ggplot2)
ggplot(aripo_de) +
geom_point(aes(x = Id, y = Supporting_reads))
ggplot(aripo_de) +
geom_point(aes(x = Id, y = Supporting_reads, group = Pop))
ggplot(aripo_de) +
geom_point(aes(x = Id, y = Supporting_reads, group = Pop))
ggplot(aripo_de) +
geom_point(aes(x = Id, y = Supporting_reads), group = Pop)
ggplot(aripo_de) +
geom_point(aes(x = Id, y = Supporting_reads), group = Pop)
ggplot(aripo_de) +
geom_point(aes(x = Id, y = Supporting_reads, group = Pop))
ggplot(aripo_de) +
geom_point(aes(x = Id, y = Supporting_reads, fill = Pop))
ggplot(aripo_de, aes(Supporting_reads, fill = Pop))
ggplot(aripo_de, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free")
ggplot(aripo_de, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free")
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
for (id in aripo_de$Id) {
aripo_de %>% filter(Id == id) -> tmp
ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id)
}
for (id in aripo_de$Id) {
aripo_de %>% filter(Id == id) -> tmp
ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id) -> p
print(p)
}
View(tmp)
ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id) -> p
View(tmp)
print(p)
for (id in aripo_de$Id) {
aripo_de %>% filter(Id == id) -> tmp
ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id) -> p
print(p)
}
for (id in aripo_de$Id) {
aripo_de %>% filter(Id == id) -> tmp
ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id) -> p
p
}
for (id in aripo_de$Id) {
aripo_de %>% filter(Id == id) -> tmp
ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id) -> p
p
}
for (id in aripo_de$Id) {
aripo_de %>% filter(Id == id) -> tmp
print(ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id))
}
unique(aripo_de$Id)
gc()
for (id in unique(aripo_de$Id)) {
aripo_de %>% filter(Id == id) -> tmp
print(ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~., margins = TRUE, scales = "free") +
ggtitle(id))
}
print(ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~ Rearing, margins = TRUE, scales = "free") +
ggtitle(id))
print(ggplot(tmp, aes(Supporting_reads, fill = Pop)) +
geom_histogram(binwidth = 1) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp, aes(EL_mean, fill = Pop)) +
geom_histogram(binwidth = 0.01) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp, aes(EL_mean, fill = Pop)) +
geom_histogram(binwidth = 0.001) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp, aes(EL_mean, fill = Pop)) +
geom_histogram(binwidth = 0.1) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp, aes(EL_mean, fill = Pop)) +
geom_histogram(binwidth = 0.5) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp) +
geom_col(aes(Group, Edit_level)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp) +
geom_col(aes(Group, Edit_level, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Edit_level), Edit_level, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id))
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Edit_level), Edit_level, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample")
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Edit_level), Edit_level, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
aripo_de %>% filter(qval <= 0.05) -> aripo_filt
de_res %>% filter(qval <= 0.05) -> de_res_popSig
de_res %>% filter(qval_pop <= 0.05) -> de_res_popSig
View(de_res_sing)
View(de_res_popSig)
tmp.out = data.frame()
for (id in de_res_popSig$id) {
aripo_de %>% filter(Id == id) -> tmp
tmp.out = rbind(tmp.out, tmp)
}
View(tmp.out)
for (id in unique(tmp.out$Id)) {
tmp.out %>% filter(Id == id) -> tmp
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Edit_level), Edit_level, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
}
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Edit_level), Edit_level, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
View(de_res_popSig)
for (id in unique(tmp.out$Id)) {
tmp.out %>% filter(Id == id) -> tmp
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Edit_level), Edit_level, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
}
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Supporting_reads), Supporting_reads, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
for (id in unique(tmp.out$Id)) {
tmp.out %>% filter(Id == id) -> tmp
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Supporting_reads), Supporting_reads, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
}
de_res %>% filter(qval_int <= 0.05) -> de_res_intSig
tmp.out = data.frame()
for (id in de_res_intSig$id) {
aripo_de %>% filter(Id == id) -> tmp
tmp.out = rbind(tmp.out, tmp)
}
for (id in unique(tmp.out$Id)) {
tmp.out %>% filter(Id == id) -> tmp
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Supporting_reads), Supporting_reads, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
}
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm.R", echo=TRUE)
lsmeans(fit_glmer,~Pop*Rearing,contr=list(Pop=c(-0.5,0.5,-0.5,0.5),Rearing=c(0.5,0.5,-0.5,-0.5),
inter=c(1,-1,-1,1),
simple_HPP_LPP= c(-1,1,0,0),
simple_HPNP_LPNP= c(0,0,-1,1),
simple_LPP_LPNP= c(1,0,-1,0),
simple_HPP_HPNP= c(0,1,0,-1)
))$contrasts)
#test contrast to check population and rearing effect
# main_eff=test(lsmeans(fit_glmer,~group,contr=list(pop=c(0.5,0.5,-0.5,-0.5),rear=c(0.5,-0.5,0.5,-0.5),
#                                                   interaction=c(1,-1,-1,1)))$contrasts)
main_eff=test(lsmeans(fit_glmer,~Pop*Rearing,contr=list(Pop=c(-0.5,0.5,-0.5,0.5),Rearing=c(0.5,0.5,-0.5,-0.5),
inter=c(1,-1,-1,1),
simple_HPP_LPP= c(-1,1,0,0),
simple_HPNP_LPNP= c(0,0,-1,1),
simple_LPP_LPNP= c(1,0,-1,0),
simple_HPP_HPNP= c(0,1,0,-1)
))$contrasts)
main_eff=test(lsmeans(fit_glmer,~Pop*Rearing,contr=list(Pop=c(-0.5,0.5,-0.5,0.5),Rearing=c(0.5,0.5,-0.5,-0.5),
inter=c(1,-1,-1,1),
simple_HPP_LPP= c(-1,1,0,0),
simple_HPNP_LPNP= c(0,0,-1,1),
simple_LPP_LPNP= c(1,0,-1,0),
simple_HPP_HPNP= c(0,1,0,-1)
main_eff=test(lsmeans(fit_glmer,~Pop*Rearing,contr=list(Pop=c(-0.5,0.5,-0.5,0.5),Rearing=c(0.5,0.5,-0.5,-0.5),
main_eff=test(lsmeans(fit_glmer,~Pop*Rearing,contr=list(Pop=c(-0.5,0.5,-0.5,0.5),Rearing=c(0.5,0.5,-0.5,-0.5),
inter=c(1,-1,-1,1),
simple_HPP_LPP= c(-1,1,0,0),
simple_HPNP_LPNP= c(0,0,-1,1),
simple_LPP_LPNP= c(1,0,-1,0),
simple_HPP_HPNP= c(0,1,0,-1)
))$contrasts)
fit_glmer<-glmer.nb(quare_sr[i,] ~ Pop*Rearing + (1|Family) + offset(log(quare_dp[i,])),
data = samples.quare)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm.R", echo=TRUE)
fit_glmer<-glmer.nb(quare_sr[i,] ~ Pop*Rearing + (1|Family) + offset(log(quare_dp[i,])),
data = samples.quare)
fit_glmer<-glmer.nb(quare_sr[i,] ~Pop*Rearing + (1|Family),
data = samples.quare,
control=glmerControl(optimizer=optim_alg[j])
fit_glmer<-glmer.nb(quare_sr[i,] ~Pop*Rearing + (1|Family),
fit_glmer<-glmer.nb(quare_sr[i,] ~Pop*Rearing + (1|Family),
data = samples.quare,
control=glmerControl(optimizer=optim_alg[j]))
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
View(de_res)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Supporting_reads), Supporting_reads, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
View(de_res_intSig)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm.R", echo=TRUE)
id = rownames(quare_sr)[i]
View(aripo_sr)
View(quare_sr)
rm(list = ls())
library(dplyr)
library(stringr)
read.csv(file = "data/Aripo_dp_mat.csv") -> aripo_dp
read.csv(file = "data/aripo.mat") -> aripo_sr
read.csv(file = "data/Quare_dp_mat.csv") -> quare_dp
read.csv(file = "data/quare.mat") -> quare_sr
read.csv(file = "data/SraRunTable.csv") -> sra_table
# make sample table from sra run table
sra_table %>% filter(Strain == "Aripo") -> sra_aripo
#sra_table %>% filter(Strain == "Quare") -> sra_quare
strsplit(sra_aripo$Library.Name, c("_")) -> tmp
#strsplit(sra_quare$Library.Name, "_") -> tmp.quare
as.data.frame(tmp) -> tmp
#as.data.frame(tmp.quare) -> tmp.quare
t(tmp) -> tmp
#t(tmp.quare) -> tmp.quare
strsplit(tmp[1:40,2], split = "-") -> tmp2
#strsplit(tmp.quare[1:60,2], split = "-") -> tmp.quare2
as.data.frame(tmp2) -> tmp2
#as.data.frame(tmp.quare2) -> tmp.quare2
t(tmp2) -> tmp2
#t(tmp.quare2) -> tmp.quare2
cbind(tmp[1:40,1], tmp2[1:40,1:2]) -> tmp3
#cbind(tmp.quare[1:60,1], tmp.quare2[1:60,1:2]) -> tmp.quare3
as.data.frame(tmp3) -> samples
#as.data.frame(tmp.quare3) -> samples.quare
colnames(samples) = c("sample","Pop","Rearing")
#colnames(samples.quare) = c("sample","Pop","Rearing")
rownames(samples) = 1:40
#rownames(samples.quare) = 1:60
Family= c( 208,211,208,212,207,209,207,207,210,210,210,210,214,204,204,205,214,211,214,219,206,218,217,219,217,219,201,215,201,215,216,203,216,203,216,215,201,204,202,205)
samples[order(samples$sample),] -> samples
samples$Family = Family
read.csv(file = "data/BehO2_Male_decode.csv") -> samples.quare
samples.quare %>% dplyr::select(-X, -Sequenced) -> samples.quare
colnames(aripo_sr)[1] = "Id"
colnames(quare_sr)[1] = "Id"
View(quare_sr)
colnames(quare_sr)[2:59]
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm.R", echo=TRUE)
rm(list = ls())
gc()
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm.R", echo=TRUE)
source("~/Desktop/HokeLab_2023/2023_05/AI_glmm/scripts/AI_glmm_eval.R", echo=TRUE)
print(ggplot(tmp) +
geom_col(aes(reorder(Group, Supporting_reads), Supporting_reads, fill = Pop)) +
facet_grid(Pop ~ Rearing, margins = F, scales = "free") +
ggtitle(id)) +
xlab("Individual sample") +
theme(axis.text.x = element_blank())
write.csv(de_res, file = "output/aripo_de_res.csv")
write.csv(de_res_quare, file = "output/quare_de_res.csv")
write.csv(de_res, file = "output/aripo_de_res.csv", row.names = F)
write.csv(de_res_quare, file = "output/quare_de_res.csv", row.names = F)
